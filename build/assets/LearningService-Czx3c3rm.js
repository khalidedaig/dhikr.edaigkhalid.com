var h=Object.defineProperty;var f=(c,t,e)=>t in c?h(c,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):c[t]=e;var g=(c,t,e)=>f(c,typeof t!="symbol"?t+"":t,e);class p{constructor(){g(this,"storageKey","dhikr-learning-data");g(this,"sessionsKey","dhikr-sessions");this.init()}init(){if(!localStorage.getItem(this.storageKey)){const t={preferences:{favoriteTimeSlots:[],preferredGoals:{},completionPatterns:{},dhikrByTime:{}},analytics:{totalSessions:0,totalCounts:0,averageSessionDuration:0,streakDays:0,lastActiveDate:null},recommendations:{suggestedGoals:{},preferredDhikr:[],nextSessionTime:null},insights:{bestPerformingTimes:[],consistencyScore:0,improvementAreas:[]}};localStorage.setItem(this.storageKey,JSON.stringify(t))}localStorage.getItem(this.sessionsKey)||localStorage.setItem(this.sessionsKey,JSON.stringify([]))}recordSession(t,e,r,s,n){if(!this.getLearningData())return;const o={dhikrId:t,count:e,goal:r,completed:e>=r&&r>0,startTime:s,endTime:n,duration:n-s,timeOfDay:new Date(s).getHours(),dayOfWeek:new Date(s).getDay(),timestamp:Date.now()},a=this.getSessions();a.push(o),this.saveSessions(a),this.updateAnalytics(o),this.updatePreferences(o),this.generateRecommendations()}recordInteraction(t,e,r={}){const s={type:t,dhikrId:e,timestamp:Date.now(),timeOfDay:new Date().getHours(),...r},n=this.getLearningData();n&&(n.interactions||(n.interactions=[]),n.interactions.push(s),n.interactions.length>1e3&&(n.interactions=n.interactions.slice(-1e3)),this.saveLearningData(n),this.learnFromInteraction(s))}learnFromInteraction(t){const e=this.getLearningData();if(e){switch(t.type){case"goal_change":this.learnGoalPreferences(t,e);break;case"dhikr_select":this.learnDhikrPreferences(t,e);break;case"time_preference":this.learnTimePreferences(t,e);break;case"increment":this.learnUsagePatterns(t,e);break}this.saveLearningData(e)}}learnGoalPreferences(t,e){if(!t.dhikrId||t.newGoal===void 0)return;const{dhikrId:r,newGoal:s,oldGoal:n}=t;e.preferences.preferredGoals[r]||(e.preferences.preferredGoals[r]=[]);const i={goal:s,timestamp:Date.now(),context:{timeOfDay:new Date().getHours(),previousGoal:n||0}};e.preferences.preferredGoals[r].push(i),e.preferences.preferredGoals[r].length>10&&(e.preferences.preferredGoals[r]=e.preferences.preferredGoals[r].slice(-10))}learnDhikrPreferences(t,e){if(!t.dhikrId)return;const{dhikrId:r}=t,s=new Date().getHours();e.preferences.dhikrByTime||(e.preferences.dhikrByTime={});const n=this.getTimeSlot(s);e.preferences.dhikrByTime[n]||(e.preferences.dhikrByTime[n]={}),e.preferences.dhikrByTime[n][r]||(e.preferences.dhikrByTime[n][r]=0),e.preferences.dhikrByTime[n][r]++}learnTimePreferences(t,e){const r=this.getTimeSlot(t.timeOfDay);e.preferences.favoriteTimeSlots.includes(r)||e.preferences.favoriteTimeSlots.push(r)}learnUsagePatterns(t,e){if(!t.dhikrId)return;const{dhikrId:r}=t,s=this.getTimeSlot(t.timeOfDay);e.preferences.dhikrByTime||(e.preferences.dhikrByTime={}),e.preferences.dhikrByTime[s]||(e.preferences.dhikrByTime[s]={}),e.preferences.dhikrByTime[s][r]||(e.preferences.dhikrByTime[s][r]=0),e.preferences.dhikrByTime[s][r]++}updateAnalytics(t){const e=this.getLearningData();if(!e)return;const r=e.analytics;r.totalSessions++,r.totalCounts+=t.count,r.averageSessionDuration=(r.averageSessionDuration*(r.totalSessions-1)+t.duration)/r.totalSessions,this.updateStreak(t.startTime,r),r.lastActiveDate=new Date(t.startTime).toDateString(),this.saveLearningData(e)}updatePreferences(t){const e=this.getLearningData();if(!e)return;const r=this.getTimeSlot(new Date(t.startTime).getHours());e.preferences.favoriteTimeSlots.includes(r)||e.preferences.favoriteTimeSlots.push(r),e.preferences.completionPatterns[t.dhikrId]||(e.preferences.completionPatterns[t.dhikrId]={attempts:0,completions:0,averageCount:0});const s=e.preferences.completionPatterns[t.dhikrId];s.attempts++,t.completed&&s.completions++,s.averageCount=(s.averageCount*(s.attempts-1)+t.count)/s.attempts,e.preferences.dhikrByTime||(e.preferences.dhikrByTime={}),e.preferences.dhikrByTime[r]||(e.preferences.dhikrByTime[r]={}),e.preferences.dhikrByTime[r][t.dhikrId]||(e.preferences.dhikrByTime[r][t.dhikrId]=0),e.preferences.dhikrByTime[r][t.dhikrId]++,this.saveLearningData(e)}generateRecommendations(){const t=this.getLearningData();if(!t)return;const e=this.getSessions();this.generateGoalRecommendations(t,e),this.generateDhikrRecommendations(t),this.generateTimeRecommendations(t,e),this.saveLearningData(t)}generateGoalRecommendations(t,e){const r={};e.forEach(s=>{r[s.dhikrId]||(r[s.dhikrId]={attempts:0,completions:0,averageCompletion:0});const n=r[s.dhikrId];n.attempts++,s.completed&&n.completions++,n.averageCompletion=(n.averageCompletion*(n.attempts-1)+(s.goal>0?s.count/s.goal:0))/n.attempts}),Object.keys(r).forEach(s=>{const n=r[s];if(n.attempts>=3){const i=n.completions/n.attempts;if(i<.6){const o=e.filter(a=>a.dhikrId===s).slice(-5);if(o.length>0){const a=o.reduce((l,m)=>l+m.count,0)/o.length;t.recommendations.suggestedGoals[s]=Math.ceil(a*1.2)}}else if(i>.9){const o=e.filter(a=>a.dhikrId===s).slice(-3);if(o.length>0){const a=o.reduce((l,m)=>l+m.goal,0)/o.length;t.recommendations.suggestedGoals[s]=Math.ceil(a*1.3)}}}})}generateDhikrRecommendations(t){const e=this.getTimeSlot(new Date().getHours());if(t.preferences.dhikrByTime&&t.preferences.dhikrByTime[e]){const r=Object.entries(t.preferences.dhikrByTime[e]).sort(([,s],[,n])=>n-s).slice(0,3);t.recommendations.preferredDhikr=r.map(([s,n])=>({dhikrId:s,count:n,confidence:Math.min(n/10,1),reason:`You often practice this dhikr during ${e}`}))}}generateTimeRecommendations(t,e){if(e.length<5)return;const r={};e.forEach(n=>{const i=new Date(n.startTime).getHours();r[i]||(r[i]={count:0,completions:0}),r[i].count++,n.completed&&r[i].completions++});const s=Object.entries(r).map(([n,i])=>({hour:parseInt(n),completionRate:i.completions/i.count,frequency:i.count})).filter(n=>n.frequency>=2).sort((n,i)=>i.completionRate-n.completionRate);s.length>0&&(t.recommendations.nextSessionTime=s[0].hour)}getPersonalizedInsights(){const t=this.getLearningData(),e=this.getSessions();return t?{consistency:this.calculateConsistencyScore(e),bestTime:this.getBestPerformingTime(e),improvement:this.getImprovementSuggestions(t,e),streakInfo:{current:t.analytics.streakDays,longest:this.getLongestStreak(e)},favoritesDhikr:this.getMostUsedDhikr(e),goalOptimization:this.getGoalOptimizationTips(t)}:{consistency:0,bestTime:"Not enough data",improvement:[],streakInfo:{current:0,longest:0},favoritesDhikr:[],goalOptimization:[]}}getTimeSlot(t){return t>=5&&t<12?"morning":t>=12&&t<17?"afternoon":t>=17&&t<21?"evening":"night"}updateStreak(t,e){const r=new Date(t).toDateString(),s=new Date(Date.now()-864e5).toDateString();e.lastActiveDate===s||e.lastActiveDate===r?e.lastActiveDate!==r&&e.streakDays++:e.lastActiveDate!==r&&(e.streakDays=1),e.lastActiveDate=r}calculateConsistencyScore(t){if(t.length<7)return 0;const e=t.filter(s=>Date.now()-s.timestamp<=7*24*60*60*1e3),r=new Set(e.map(s=>new Date(s.timestamp).toDateString())).size;return Math.round(r/7*100)}getBestPerformingTime(t){if(t.length<5)return"Not enough data";const e={};t.forEach(s=>{const n=this.getTimeSlot(new Date(s.startTime).getHours());e[n]||(e[n]={total:0,completed:0}),e[n].total++,s.completed&&e[n].completed++});const r=Object.entries(e).map(([s,n])=>({slot:s,rate:n.completed/n.total,count:n.total})).filter(s=>s.count>=2).sort((s,n)=>n.rate-s.rate)[0];return r?r.slot:"Not enough data"}getImprovementSuggestions(t,e){const r=[];if(e.length>5){const s=e.slice(-10),n=s.filter(o=>o.completed).length/s.length;n<.5?r.push("Consider setting lower goals to build consistency"):n>.9&&r.push("You're doing great! Consider increasing your goals"),this.calculateConsistencyScore(e)<50&&r.push("Try to practice daily for better consistency")}return r}getLongestStreak(t){if(t.length===0)return 0;let e=1,r=1;const s=t.map(n=>new Date(n.startTime).toDateString()).filter((n,i,o)=>o.indexOf(n)===i).sort();for(let n=1;n<s.length;n++){const i=new Date(s[n]),o=new Date(s[n-1]);Math.floor((i.getTime()-o.getTime())/(1e3*60*60*24))===1?(r++,e=Math.max(e,r)):r=1}return e}getMostUsedDhikr(t){const e={};return t.forEach(r=>{e[r.dhikrId]=(e[r.dhikrId]||0)+1}),Object.entries(e).sort(([,r],[,s])=>s-r).slice(0,3).map(([r,s])=>({dhikrId:r,count:s}))}getGoalOptimizationTips(t){const e=[];return Object.entries(t.preferences.completionPatterns||{}).forEach(([r,s])=>{if(s.attempts>=5){const n=s.completions/s.attempts;n<.3?e.push({dhikrId:r,tip:`Consider reducing the goal for this dhikr to ${Math.ceil(s.averageCount*1.1)}`}):n>.95&&e.push({dhikrId:r,tip:"You consistently complete this dhikr! Try increasing the goal."})}}),e}getLearningData(){try{const t=localStorage.getItem(this.storageKey);return t?JSON.parse(t):null}catch(t){return console.error("Error loading learning data:",t),null}}saveLearningData(t){try{localStorage.setItem(this.storageKey,JSON.stringify(t))}catch(e){console.error("Error saving learning data:",e)}}getSessions(){try{const t=localStorage.getItem(this.sessionsKey);return t?JSON.parse(t):[]}catch(t){return console.error("Error loading sessions:",t),[]}}saveSessions(t){try{const e=t.slice(-500);localStorage.setItem(this.sessionsKey,JSON.stringify(e))}catch(e){console.error("Error saving sessions:",e)}}getCurrentRecommendation(){const t=this.getLearningData();if(!t)return null;const e=this.getTimeSlot(new Date().getHours());if(t.preferences.dhikrByTime&&t.preferences.dhikrByTime[e]){const r=Object.entries(t.preferences.dhikrByTime[e]).sort(([,s],[,n])=>n-s);if(r.length>0)return{dhikrId:r[0][0],confidence:Math.min(r[0][1]/10,1),reason:`You often practice this dhikr during ${e}`}}return null}getSuggestedGoal(t){const e=this.getLearningData();return e&&e.recommendations.suggestedGoals[t]?{goal:e.recommendations.suggestedGoals[t],reason:"Based on your completion patterns"}:null}getAnalyticsSummary(){const t=this.getLearningData(),e=this.getSessions();return t?{totalSessions:t.analytics.totalSessions,totalCounts:t.analytics.totalCounts,averageSessionDuration:Math.round(t.analytics.averageSessionDuration/1e3),streakDays:t.analytics.streakDays,consistency:this.calculateConsistencyScore(e),favoriteTime:this.getBestPerformingTime(e),recentSessions:e.slice(-10).reverse()}:{totalSessions:0,totalCounts:0,averageSessionDuration:0,streakDays:0,consistency:0,favoriteTime:"Not enough data",recentSessions:[]}}resetLearningData(){try{localStorage.removeItem(this.storageKey),localStorage.removeItem(this.sessionsKey),this.init()}catch(t){console.error("Error resetting learning data:",t)}}}const u=new p;export{u as l};
